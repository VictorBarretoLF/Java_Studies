# This property is for enabling the display of SQL statements in the log. It is useful for debugging and understanding what SQL operations are being run by the application.
spring.jpa.show-sql=true

# This property enables the display of the SQL statements generated by Hibernate in a more readable format.
spring.jpa.properties.hibernate.show_sql=true

# This property formats the SQL in the console, making it more readable by adding line breaks and indentation.
spring.jpa.properties.hibernate.format_sql=true

# This property is for showing the values that are bound to the query placeholders. It helps in debugging SQL statements. 
# For versions before Spring Boot 3.0.2, the commented line is used. 
# For Spring Boot 3.0.2 and later, use the 'logging.level.org.hibernate.type.descriptor.sql=trace' line.
# logging.level.org.hibernate.type.descriptor.sql=trace
# Spring Boot 3.0.2+
logging.level.org.hibernate.type.descriptor.sql=trace

# This property enables the H2 console, which is an in-memory database console for development purposes.
spring.h2.console.enabled=true

# This is the URL for the datasource. Here it specifies that an H2 in-memory database should be used with certain settings like MySQL compatibility mode and case-insensitive identifiers.
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL;DATABASE_TO_LOWER=TRUE;CASE_INSENSITIVE_IDENTIFIERS=TRUE

# Username for the datasource. Here it's set to 'sa', which is a common default for H2.
spring.datasource.username=sa

# Password for the datasource, it's set to 'password'. It should be changed to something secure in a real application.
spring.datasource.password=password

# This specifies the type of database that Hibernate should expect. Here it's set to 'mysql', which means Hibernate will expect the database to behave like a MySQL database.
spring.jpa.database=mysql

# This property specifies the Hibernate dialect to use. The dialect translates Hibernate's generic SQL into database-specific SQL. Here it's set for MySQL 8.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# This property controls the behavior of schema generation. 'update' means that Hibernate will update the schema based on entity classes without destroying existing data.
spring.jpa.hibernate.ddl-auto=validate

spring.jpa.defer-datasource-initialization=false

spring.liquibase.change-log=db/changelog/changelog-master.xml